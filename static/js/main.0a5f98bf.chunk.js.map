{"version":3,"sources":["components/MovieCard.js","components/Loading.js","services/movieData.js","services/movieAPI.js","components/Footer.js","pages/MovieList.js","components/MovieForm.js","pages/MovieDetails.js","pages/NewMovie.js","pages/EditMovie.js","pages/NotFound.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["MovieCard","movie","this","props","id","title","subtitle","storyline","imagePath","data-testid","className","to","src","alt","React","Component","Loading","children","movies","rating","bookmarked","genre","localStorage","setItem","JSON","stringify","data","readMovies","parse","getItem","saveMovies","simulateRequest","response","callback","setTimeout","getMovie","movieId","find","mov","parseInt","Promise","resolve","updateMovie","updatedMovie","map","createMovie","movieData","nextId","length","newMovie","deleteMovie","filter","status","Footer","MovieList","state","fetchMovies","a","requestReturn","setState","key","MovieForm","handleSubmit","bind","onSubmit","field","newValue","htmlFor","placeholder","type","value","onChange","event","target","step","min","max","onClick","renderTitleInput","renderSubtitleInput","renderImagePathInput","renderStorylineInput","renderGenreSelection","renderRatingInput","renderSubmitButton","defaultProps","undefined","MovieDetails","fetchMovie","match","params","movieAPI","NewMovie","shouldRedirect","EditMovie","NotFound","Header","App","path","component","exact","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0a5f98bf.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nclass MovieCard extends React.Component {\n  render() {\n    const { movie } = this.props;\n    const { id, title, subtitle, storyline, imagePath } = movie;\n    return (\n      <div data-testid=\"movie-card\" className=\"movie-card\">\n        <div className=\"movie-card-info\">\n          <h1>{ title }</h1>\n          <h3>{ subtitle }</h3>\n          <p>{ storyline }</p>\n          <Link to={ `/movies/${id}` }>VER DETALHES</Link>\n        </div>\n        <img src={ imagePath } alt={ `Imagem do filme ${title}` } />\n      </div>\n    );\n  }\n}\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    subtitle: PropTypes.string.isRequired,\n    storyline: PropTypes.string.isRequired,\n    imagePath: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default MovieCard;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Loading extends Component {\n  render() {\n    const { children } = this.props;\n    return (\n      <div>{ children }</div>\n    );\n  }\n}\n\nLoading.propTypes = {\n  children: PropTypes.string.isRequired,\n};\n\nexport default Loading;\n","const movies = [\n  {\n    id: 1,\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 2,\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    id: 3,\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'images/Ghost_In_The_Shell_2_0.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    id: 4,\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 5,\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","import data from './movieData';\n\nlocalStorage.setItem('movies', JSON.stringify(data));\n\nconst readMovies = () => JSON.parse(localStorage.getItem('movies'));\nconst saveMovies = (movies) => localStorage.setItem('movies', JSON.stringify(movies));\n\nconst TIMEOUT = 2000;\nconst SUCCESS_STATUS = 'OK';\n\n// --------------------------------------------------------------------\n// A função simulateRequest simula uma requisição para uma API externa\n// Esse tipo de função que \"chama outra função\" é chamada de\n// \"currying function\" https://javascript.info/currying-partials\n// não se preocupe, estudaremos isso mais futuramente\n// --------------------------------------------------------------------\n\nconst simulateRequest = (response) => (callback) => {\n  setTimeout(() => {\n    callback(response);\n  }, TIMEOUT);\n};\n\nexport const getMovies = () => (\n  new Promise((resolve) => {\n    const movies = readMovies();\n    simulateRequest(movies)(resolve);\n  })\n);\n\nexport const getMovie = (movieId) => {\n  const movie = readMovies().find((mov) => mov.id === parseInt(movieId, 10));\n  return new Promise((resolve) => {\n    simulateRequest(movie)(resolve);\n  });\n};\n\nexport const updateMovie = (updatedMovie) => (\n  new Promise((resolve) => {\n    const movies = readMovies().map((movie) => {\n      if (movie.id === parseInt(updatedMovie.id, 10)) {\n        return { ...movie, ...updatedMovie };\n      }\n      return movie;\n    });\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const createMovie = (movieData) => (\n  new Promise((resolve) => {\n    let movies = readMovies();\n    const nextId = movies[movies.length - 1].id + 1;\n    const newMovie = { ...movieData, id: nextId };\n    movies = [...movies, newMovie];\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const deleteMovie = (movieId) => {\n  let movies = readMovies();\n  movies = movies.filter((movie) => movie.id !== parseInt(movieId, 10));\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    simulateRequest({ status: SUCCESS_STATUS })(resolve);\n  });\n};\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass Footer extends Component {\n  render() {\n    return (\n      <footer>\n        <Link to=\"/movies/new\">ADICIONAR CARTÃO</Link>\n      </footer>\n    );\n  }\n}\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport MovieCard from '../components/MovieCard';\nimport Loading from '../components/Loading';\n\nimport * as movieAPI from '../services/movieAPI';\nimport Footer from '../components/Footer';\n\nclass MovieList extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      movies: [],\n    };\n  }\n\n  componentDidMount() {\n    this.fetchMovies();\n  }\n\n  async fetchMovies() {\n    const requestReturn = await movieAPI.getMovies();\n    this.setState({\n      movies: requestReturn,\n    });\n  }\n\n  render() {\n    const { movies } = this.state;\n    return (\n      <div data-testid=\"movie-list\" className=\"movie-list\">\n        {(movies.length === 0)\n          ? <Loading>Carregando...</Loading>\n          : movies.map((movie) => <MovieCard key={ movie.title } movie={ movie } />)}\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default MovieList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass MovieForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...props.movie };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit() {\n    const { onSubmit } = this.props;\n    onSubmit(this.state);\n  }\n\n  updateMovie(field, newValue) {\n    this.setState({ [field]: newValue });\n  }\n\n  renderTitleInput() {\n    const { title } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_title\">\n          Título:\n          <br />\n          <input\n            placeholder=\"Insira o título\"\n            id=\"movie_title\"\n            type=\"text\"\n            className=\"validate\"\n            value={ title }\n            onChange={ (event) => this.updateMovie('title', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderSubtitleInput() {\n    const { subtitle } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_subtitle\">\n          Subtítulo:\n          <br />\n          <input\n            placeholder=\"Insira o subtítulo\"\n            id=\"movie_subtitle\"\n            type=\"text\"\n            value={ subtitle }\n            onChange={ (event) => this.updateMovie('subtitle', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderImagePathInput() {\n    const { imagePath } = this.state;\n\n    return (\n      <div className=\"row\">\n        <label htmlFor=\"movie_image\">\n          Imagem:\n          <br />\n          <input\n            placeholder=\"Insira o caminho da imagem\"\n            id=\"movie_image\"\n            type=\"text\"\n            value={ imagePath }\n            onChange={ (event) => this.updateMovie('imagePath', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderStorylineInput() {\n    const { storyline } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_storyline\">\n          Sinopse:\n          <br />\n          <textarea\n            id=\"movie_storyline\"\n            value={ storyline }\n            onChange={ (event) => this.updateMovie('storyline', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderGenreSelection() {\n    const { genre } = this.state;\n    return (\n      <div>\n        <label htmlFor=\"movie_genre\">\n          Gênero:\n          <br />\n          <select\n            id=\"movie_genre\"\n            value={ genre }\n            onChange={ (event) => this.updateMovie('genre', event.target.value) }\n          >\n            <option value=\"action\">Ação</option>\n            <option value=\"comedy\">Comédia</option>\n            <option value=\"thriller\">Suspense</option>\n            <option value=\"fantasy\">Fantasia</option>\n          </select>\n        </label>\n      </div>\n    );\n  }\n\n  renderRatingInput() {\n    const { rating } = this.state;\n    return (\n      <div>\n        <label htmlFor=\"movie_rating\">\n          Avaliação:\n          <br />\n          <input\n            placeholder=\"Dê a avaliação do filme\"\n            id=\"movie_rating\"\n            type=\"number\"\n            step={ 0.1 }\n            min={ 0 }\n            max={ 5 }\n            value={ rating }\n            onChange={ (event) => this.updateMovie('rating', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderSubmitButton() {\n    return (\n      <div className=\"div-btn-submit\">\n        <button\n          type=\"button\"\n          onClick={ this.handleSubmit }\n        >\n          Submit\n        </button>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <form>\n          {this.renderTitleInput()}\n          {this.renderSubtitleInput()}\n          {this.renderImagePathInput()}\n          {this.renderStorylineInput()}\n          {this.renderGenreSelection()}\n          {this.renderRatingInput()}\n          {this.renderSubmitButton()}\n        </form>\n      </div>\n    );\n  }\n}\n\nMovieForm.propTypes = {\n  movie: PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    subtitle: PropTypes.string,\n    storyline: PropTypes.string,\n    imagePath: PropTypes.string,\n  }),\n  onSubmit: PropTypes.func.isRequired,\n};\n\n// Source: https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/require-default-props.md\n\nMovieForm.defaultProps = {\n  movie: undefined,\n};\n\nexport default MovieForm;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport * as movieAPI from '../services/movieAPI';\nimport { Loading } from '../components';\n\nclass MovieDetails extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      movie: [],\n    };\n  }\n\n  componentDidMount() {\n    this.fetchMovie();\n  }\n\n  async fetchMovie() {\n    const { match } = this.props;\n    const { id } = match.params;\n\n    const movie = await movieAPI.getMovie(id);\n    this.setState({\n      movie,\n    });\n  }\n\n  render() {\n    const { movie } = this.state;\n    const { title, storyline, imagePath, genre, rating, subtitle } = movie;\n    const { match } = this.props;\n    const { id } = match.params;\n\n    return movie.length === 0 ? (\n      <Loading>Carregando...</Loading>\n    ) : (\n      <div data-testid=\"movie-details\" className=\"movie-details\">\n        <h1>{title}</h1>\n        <img alt=\"Movie Cover\" src={ `../${imagePath}` } />\n        <p>\n          <span className=\"title-info\">Subtitle: </span>\n          {`${subtitle}`}\n        </p>\n        <p>\n          <span className=\"title-info\">Storyline: </span>\n          {`${storyline}`}\n        </p>\n        <p>\n          <span className=\"title-info\">Genre: </span>\n          {`${genre}`}\n        </p>\n        <p>\n          <span className=\"title-info\">Rating: </span>\n          {`${rating}`}\n        </p>\n        <ul>\n          <li>\n            <Link to=\"/\">VOLTAR</Link>\n          </li>\n          <li>\n            <Link to={ `/movies/${id}/edit` }>EDITAR</Link>\n          </li>\n          <li>\n            <Link to=\"/\" onClick={ async () => movieAPI.deleteMovie(id) }>\n              DELETAR\n            </Link>\n          </li>\n        </ul>\n      </div>\n    );\n  }\n}\n\nMovieDetails.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default MovieDetails;\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router';\n\nimport MovieForm from '../components/MovieForm';\nimport * as movieAPI from '../services/movieAPI';\n\nclass NewMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      shouldRedirect: false,\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(newMovie) {\n    this.setState({ shouldRedirect: false }, async () => {\n      await movieAPI.createMovie(newMovie);\n      this.setState({\n        shouldRedirect: true,\n      });\n    });\n  }\n\n  render() {\n    const { shouldRedirect } = this.state;\n\n    if (shouldRedirect) {\n      return <Redirect to=\"/\" />;\n    }\n    return (\n      <div data-testid=\"new-movie\" className=\"new-movie\">\n        <MovieForm onSubmit={ this.handleSubmit } />\n      </div>\n    );\n  }\n}\nexport default NewMovie;\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router';\nimport PropTypes from 'prop-types';\n\nimport { Loading, MovieForm } from '../components';\nimport * as movieAPI from '../services/movieAPI';\n\nclass EditMovie extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      status: 'loading',\n      shouldRedirect: false,\n      movie: {},\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchMovie();\n  }\n\n  handleSubmit(updatedMovie) {\n    this.setState({ shouldRedirect: false }, async () => {\n      await movieAPI.updateMovie(updatedMovie);\n      this.setState({\n        shouldRedirect: true,\n      });\n    });\n  }\n\n  async fetchMovie() {\n    const { match } = this.props;\n    const { id } = match.params;\n\n    const movie = await movieAPI.getMovie(id);\n    this.setState({\n      status: 'updated',\n      movie,\n    });\n  }\n\n  render() {\n    const { status, shouldRedirect, movie } = this.state;\n    if (shouldRedirect) {\n      return <Redirect to=\"/\" />;\n    }\n\n    if (status === 'loading') {\n      return <Loading>Carregando...</Loading>;\n    }\n\n    return (\n      <div data-testid=\"edit-movie\" className=\"edit-movie\">\n        <MovieForm movie={ movie } onSubmit={ this.handleSubmit } />\n      </div>\n    );\n  }\n}\n\nEditMovie.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default EditMovie;\n","import React, { Component } from 'react';\n\nclass NotFound extends Component {\n  render() {\n    return <div data-testid=\"404-error\">Página não encontrada</div>;\n  }\n}\n\nexport default NotFound;\n","import React, { Component } from 'react';\n\nclass Header extends Component {\n  render() {\n    return (\n      <header>\n        <h1>Movie Card Library</h1>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport MovieList from './pages/MovieList';\nimport MovieDetails from './pages/MovieDetails';\nimport NewMovie from './pages/NewMovie';\nimport EditMovie from './pages/EditMovie';\nimport NotFound from './pages/NotFound';\nimport Header from './components/Header';\n\nfunction App() {\n  return (\n    <Router>\n      <Header />\n      <Switch>\n        <Route path=\"/movies/new\" component={ NewMovie } />\n        <Route path=\"/movies/:id/edit\" component={ EditMovie } />\n        <Route path=\"/movies/:id\" component={ MovieDetails } />\n        <Route exact path=\"/\" component={ MovieList } />\n        <Route path=\"*\" component={ NotFound } />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}